function checkRepairMute():
	set {_r} to role with id getConfig("Config.muterole")
	set {_g} to guild with id {bot::guild}
	#deny {_r} permissions (message add reaction, message write, voice connect, voice speak) in channels of {_g} with {bot::name}

function checkUnmute():
	execute "SELECT id,karany,end FROM akcje WHERE aktywna='Tak' AND typ='Tempmute'" in {bot::sql} and store result in {_r::*}
	set {_r} to role with id getConfig("Config.muterole")
	set {_g} to guild with id {bot::guild}
	{_r} is set
	set {_bot} to getUser({bot::id})

	loop {_r::karany::*}:

		set {_karany} to getUser({_r::karany::%loop-index%}) in {_g}
		{_karany} is set

		set {_end} to unix date ("%{_r::end::%loop-index%}%" parsed as number) as date
		set {_id} to {_r::id::%loop-index%}

		if now > {_end}:
			{_g}.removeRoleFromMember({_karany}, {_r}).complete()
			modLog({_karany}.getUser().getId(), {_bot}.getId(), "Unmute", "Czas minął (ID: %{_r::id::%loop-index%}%)", getMcNick({_karany}.getUser().getId()))
			send "Hey :wave:%nl%Twoje konto zostało właśnie odciszone!%nl%%nl%Czas nadania: **%now%**%nl%--------------------------------------------------" to {_karany}.getUser() with {bot::name}
			execute "UPDATE akcje SET aktywna='Nie' WHERE id='%unsafe {_id}%'" in {bot::sql}
			delete {vv::%{_id}%::kara::cooldown}
			wait 40 tick

every 2 minute:
	checkUnmute()
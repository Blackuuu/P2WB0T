function getMaxWarnsByName(t: text, warns: number) :: text:
	set {_xd} to getJSON("plugins/Skript/scripts/0024B0T/Config/kary.json")
	map json {_xd} to {_pun::*}
	loop {_pun::list::*}:
		set {_inx} to loop-index
		set {_name} to {_pun::list::%{_inx}%::1::name}

		if {_name} contains {_t}:
			set {_tierow} to checkTier({_inx})
			loop {_tierow} times:
				set {_maxWarns} to {_pun::list::%{_inx}%::1::tier_%loop-value-2%::1::maxWarns}
				
				if {_maxWarns} = {_warns}:
					return "%loop-value-2%|%{_maxWarns}%"# tier|warny

				if {_warns} < {_maxWarns}:
					return "%loop-value-2%|%{_maxWarns}%"# tier|warny

function checkTier(index: text) :: number:
	set {_xd} to getJSON("plugins/Skript/scripts/0024B0T/Config/kary.json")
	map json {_xd} to {_pun::*}
	loop 20 times:
		if {_pun::list::%{_index}%::1::tier_%loop-value%} is set:
			add 1 to {_num}
		else:
			stop loop
	return {_num}

function checkReset(u: text):
	execute "SELECT * FROM akcje WHERE karany='%unsafe {_u}%' AND aktywna='Tak' AND type='Warn'" in {bot::sql} and store result in {_r::*}
	set {_xd} to getJSON("plugins/Skript/scripts/0024B0T/Config/kary.json")
	map json {_xd} to {_pun::*}
	loop {_r::powod::*}:
		add 1 to {_warny::powod::%loop-value%}
	loop {_pun::list::*}:
		set {_inx} to loop-index
		set {_n} to {_pun::list::%{_inx}%::1::name}

		set {_maxTierow} to checkTier({_inx})
		set {_warnyZaMaxTier} to {_pun::list::%{_inx}%::1::tier_%{_maxTierow}%::1::maxWarns}
		set {_jegoWarny} to {_warny::powod::%{_n}%}
		if "%{_warnyZaMaxTier}%" = "%{_jegoWarny}%":
			execute "UPDATE akcje SET aktywna='Nie' WHERE aktywna='Tak' AND karany='%unsafe {_u}%' AND powod='%unsafe {_n}%'" in {bot::sql}

effect KamilAPI add (pun|punish) to %user/member/text% with reason %text% (with|by) %user% [in channel %-channel%]:
	trigger:
		set {_g} to guild with id {bot::guild}
		set {_user} to expr-1

		set {_adm} to getUser({bot::id})
		set {_adm} to expr-3
		if expr-4 is not set:
			set {_channel} to event.getTextChannel()
		else:
			set {_channel} to expr-4

		if {_user} is instance of User:
			set {_u} to getUser({_user}.getId()) in {_g}
		if {_user} is instance of Member:
			set {_u} to getUser({_user}.getUser().getId()) in {_g}
		if {_user} is instance of Text:
			set {_u} to getUser({_user}) in {_g}
		
		if {_u} is not set:
			stop

		execute "SELECT * FROM akcje WHERE karany='%unsafe {_u}.getUser().getId()%' AND aktywna='Tak' AND powod='%unsafe expr-2%'" in {bot::sql} and store result in {_r::*}
		modLog({_u}.getUser().getId(), {_adm}.getId(), "Warn", expr-2, getMcNick({_u}.getUser().getId()))

		if {_adm}.getId() is not {bot::id}:
			if getCache({_adm}.getId(), "deleteMessage") is not set:
				set {_beka} to true
			if getCache({_adm}.getId(), "deleteMessage") is "false":
				set {_beka} to true
			if {_beka} is not set:
				send "%getMention({_adm}.getId())% Pomyślnie nadomo warna dla **%getName({_u}.getUser().getId())%** z powodem **%expr-2%**" to channel with id {_channel}.getId() with {bot::name}
			else:
				send "Pomyślnie nadomo warna dla **%getName({_u}.getUser().getId())%** z powodem **%expr-2%**" to channel with id {_channel}.getId() with {bot::name}
		
		set {_warny} to size of {_r::adm::*}+1
		set {_info::*} to getMaxWarnsByName(expr-2, {_warny}) split at "|"

		checkReset({_u}.getUser().getId())

		set {_xd} to getJSON("plugins/Skript/scripts/0024B0T/Config/kary.json")
		map json {_xd} to {_pun::*}
		if {_warny} = ({_info::2} parsed as number):
			loop {_pun::list::*}:
				set {_inx} to loop-index
				if {_pun::list::%{_inx}%::1::name} contains expr-2:
					set {_type} to {_pun::list::%{_inx}%::1::tier_%{_info::1}%::1::type}
					set {_time} to {_pun::list::%{_inx}%::1::tier_%{_info::1}%::1::time}
					set {_reason} to "Osiągnięto maksymalną ilość warnów."
					send "Gracz **%getName({_u}.getUser().getId())%** dostaje kare **%{_type}%** na czas **%{_time}%** z powodem: **%{_reason}%**" to channel with id {_channel}.getId() with {bot::name}
					send "Hey :wave:%nl%Właśnie dostałeś(-aś) ostrzeżenie za: **%expr-2%**.%nl%Dostajesz kare **%{_type}%** na czas **%{_time}%** z powodem: **%{_reason}%**  %nl%%nl%Czas nadania: **%now%**%nl%--------------------------------------------------" to {_u}.getUser() with {bot::name}
					set {_bot} to {_adm}
					wait 30 tick
					if {_type} is "Kick":
						set {_nick} to getMcNick({_u}.getUser().getId())
						kick {_u} from {_g} with reason {_reason} with {bot::name}
						if last vixio error is not set:
							modLog({_u}.getUser().getId(), {_bot}.getId(), "Kick", {_reason}, {_nick})

					if {_type} is "Ban":
						KamilAPI ban {_u} with reason {_reason} by {_bot}
					if {_type} is "Tempmute":
						KamilAPI tempmute {_u} with reason {_reason} in time {_time} by {_bot}
					if {_type} is "Tempban":
						KamilAPI tempban {_u} with reason {_reason} in time {_time} by {_bot}
					if {_type} is "Mute":
						KamilAPI mute {_u} with reason {_reason} by {_bot}
					if {_error} is set:
						send "Podczas nadawania kary wystąpił błąd! `%{_error}%`" to {_u}.getUser() with {bot::name}
		else:
			send "Hey :wave:%nl%Właśnie dostałeś(-aś) ostrzeżenie za: **%expr-2%**.%nl%Masz już **%{_warny}%** `/` **%{_info::2}%** warnów, więc mniej się na baczności!%nl%%nl%Czas nadania: **%now%**%nl%--------------------------------------------------" to {_u}.getUser() with {bot::name}

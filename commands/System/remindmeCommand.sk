options:
	cmd: remindme

on script load:
	set {command::{@cmd}::poziom} to 1
	set {command::{@cmd}::cooldown} to 0 seconds

	set {command::{@cmd}::opis} to "System przypomień"
	set {command::{@cmd}::kategoria} to "System"
	set {command::{@cmd}::uzycie} to "remindme (list|delete|add) [id przypomnienia/czas] [co mam przypomieć]"


every 5 minutes:
	checkReminder()

function getRemindEmbed(page: number, user: text) :: embed:
	create embed:
		set the title of embed to title with text "Lista przypomien"
		set the colour of the embed to cyan
		set the timestamp of embed to now
		set the footer of embed to footer with text "(%{_page}%/%{v::remind::%{_user}%::size}%)"

		add field named "Treść" with value {v::remind::%{_user}%::%{_page}%::powod} to embed
		add field named "Czas" with value {v::remind::%{_user}%::%{_page}%::end} to embed
		add field named "ID (do usunięcia)" with value {v::remind::%{_user}%::%{_page}%::id} to embed

	return last created embed

discord command {@cmd} [<text>] [<text>] [<text>]:
	aliases: remind
	prefixes: "%{bot::prefix}%", "%{bot::helpmention}%" 
	trigger:
		delete {v::remind::%event-user.getId()%::*}
		if arg-1 is not set:
			KamilAPI cmd error "Użyj: %{bot::prefix}%%{command::{@cmd}::uzycie}%" to event-message

		if arg-1 is "list" or "lista":
			execute "select * from remind where id=%unsafe event-user.getId()%" in {bot::sql} and store result in {_r::*}
			if {_r::id::1} is not set:
				KamilAPI cmd error "Nie masz żadnych przypomień" to event-message
			
			set {_end} to unix date ("%{_r::end::%{_inx}%}%" parsed as number) as date

			loop {_r::id::*}:
				add 1 to {_int}
				set {_inx} to loop-index

				set {v::remind::%event-user.getId()%::%{_int}%::powod} to {_r::powod::%{_inx}%}
				set {v::remind::%event-user.getId()%::%{_int}%::id} to {_r::remindid::%{_inx}%}
				set {_end} to unix date ("%{_r::end::%loop-index%}%" parsed as number) as date

				set {_t} to getTimespan("%difference between now and {_end}%")
				set {v::remind::%event-user.getId()%::%{_int}%::end} to "%{_end}% (%{_t}%)"

			set {v::remind::%event-user.getId()%::size} to size of {_r::id::*}
			set {v::remind::%event-user.getId()%::strona} to 1

			set {_e} to getRemindEmbed(1, event-user.getId())

			reply with {_e} and store it in {_msg}
			set {v::remind::%event-user.getId()%::botmsg} to {_msg}

			loop "⏮", "◀", "⏹", "▶", "⏭":
				add reaction "%loop-value%" to random message out of {_msg} with {bot::name}
			KamilAPI add emote "green" to event-message of event-user
			stop

		if arg-1 is "delete" or "remove":
			set {_arg} to arg-2 parsed as number
			if {_arg} is not set:
				KamilAPI cmd error "Podaj ID przypomienia!" to event-message

			execute "delete from remind where id=%unsafe event-user.getId()% AND remindid=%unsafe arg-2%" in {bot::sql}
			reply with "Usuwam Twoje przypomnienie o ID `%arg-2%`!"
			KamilAPI add emote "green" to event-message of event-user
			stop

		if arg-1 is "add":
			set {_time} to arg-2
			set {_powod} to arg-3
			replace all "d" with " day" in {_time}
			replace all "h" with " hour" in {_time}
			replace all "m" with " minute" in {_time}
			replace all "s" with " second" in {_time}

			set {_time} to {_time} parsed as timespan
			set {_now} to now
			add {_time} to {_now}

			if {_time} is not set:
				KamilAPI cmd error "Podano zły czas" to event-message
			if {_powod} is not set:
				KamilAPI cmd error "Nie podano powodu" to event-message
			
			execute "SELECT remindid FROM remind" in {bot::sql} and store result in {_id::*}
			loop {_id::remindid::*}:
				set {_id} to "%loop-value%" parsed as number
				log("setuje na %loop-value% (%{_id}%)")
			if {_id} is not set:
				set {_id} to 0

			set {_czas} to getTimespan("%difference between now and {_now}%")
			set {_end} to "%convert date {_now} to unix date%"

			execute "INSERT INTO `remind` (id,remindid,end,powod) VALUES(%unsafe event-user.getId()%, %{_id}%, %{_end}%, %{_powod}%)" in {bot::sql}
			
			reply with "Dodaje przypomienie! Szykuj pw za **%{_czas}%**!"
			KamilAPI add emote "green" to event-message of event-user

function checkReminder():
	execute "SELECT * FROM remind" in {bot::sql} and store result in {_r::*}

	loop {_r::id::*}:
		
		set {_inx} to loop-index
		set {_id} to loop-value
		set {_remindid} to {_r::remindid::%{_inx}%}
		set {_powod} to {_r::powod::%{_inx}%}
		set {_end} to unix date ("%{_r::end::%{_inx}%}%" parsed as number) as date

		if {_end} < now:
			set {_user} to getUser({_id})

			send "Hej, chciałym Ci o czymś przypomieć: %nl%`%{_powod}%`" to user with id {_user}.getId() with {bot::name}

			execute "delete from remind where id=%unsafe {_id}% AND remindid=%unsafe {_remindid}%" in {bot::sql}


on reaction add:
	{v::remind::%event-user.getId()%::botmsg} is event-message
	set {_e} to "%event-emote%"
	remove event-emote added by event-user from event-message

	if {_e} is "⏮":
		set {_strona} to 1
	if {_e} is "⏭":
		set {_strona} to {v::remind::%event-user.getId()%::size}

	if {_e} is "◀":
		set {_strona} to {v::remind::%event-user.getId()%::strona} - 1
	if {_e} is "▶":
		set {_strona} to {v::remind::%event-user.getId()%::strona} + 1

	if {_e} is "⏹":
		delete {v::remind::%event-user.getId()%::*}
		KamilAPI clear reaction from event-message
		stop

	if {_strona} is between 0 and {v::remind::%event-user.getId()%::size}:
		set {_e} to getRemindEmbed({_strona}, event-user.getId())
		edit {v::remind::%event-user.getId()%::botmsg} to show {_e}
		set {v::remind::%event-user.getId()%::strona} to {_strona}